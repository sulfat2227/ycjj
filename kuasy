#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>

// ================== PIN KONFIGURASI ==================
const int LASER_VCC = 7;       // Laser module
const int LDR_DO = 10;         // LDR output digital
const int BUZZER_VCC = A3;     // Buzzer VCC
const int BUZZER_GND = A0;     // Buzzer GND
const int LED_STATUS = 6;      // LED indikator rumah menyala terus

// ================== ALARM ==================
enum SystemState { NORMAL, ALARM_ACTIVE, ALARM_COMPLETED, WAIT_PIN };
SystemState currentState = NORMAL;

unsigned long alarmStartTime = 0;
const unsigned long ALARM_DURATION = 5000; // 5 detik alarm pertama
unsigned long lastSirenTime = 0;
bool sirenOn = false;
const unsigned long SIREN_ON_TIME = 700;
const unsigned long SIREN_OFF_TIME = 300;

// ================== LCD I2C ==================
LiquidCrystal_I2C lcd(0x27, 16, 2); // alamat 0x27 biasa dipakai

// ================== KEYPAD ==================
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {2, 3, 4, 5};
byte colPins[COLS] = {A1, A2, A4, A5};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// ================== PASSWORD ==================
String inputPassword = "";
String correctPassword = "1234";
bool alarmSilenced = false;

// ================== FUNGSI SIREN ==================
void updateSirenPattern() {
  unsigned long currentTime = millis();
  unsigned long timeInAlarm = currentTime - alarmStartTime;
  unsigned long timeLeft = ALARM_DURATION - timeInAlarm;

  if (timeLeft < 100) {
    digitalWrite(BUZZER_VCC, LOW);
    return;
  }

  if (sirenOn) {
    if (currentTime - lastSirenTime >= SIREN_ON_TIME) {
      sirenOn = false;
      lastSirenTime = currentTime;
      digitalWrite(BUZZER_VCC, LOW);
    }
  } else {
    if (currentTime - lastSirenTime >= SIREN_OFF_TIME) {
      if (timeLeft > SIREN_ON_TIME + 100) {
        sirenOn = true;
        lastSirenTime = currentTime;
        digitalWrite(BUZZER_VCC, HIGH);
      }
    }
  }
}

// ================== FUNGSI PASSWORD ==================
void handleKeypadInput() {
  char key = keypad.getKey();
  if (key) {
    if (key == '#') { // konfirmasi PIN
      if (inputPassword == correctPassword) {
        alarmSilenced = true;
        digitalWrite(BUZZER_VCC, LOW);
        lcd.clear();
        lcd.print("PIN BENAR!");
        delay(1000);
        currentState = NORMAL;
        lcd.clear();
        lcd.print("Sistem Normal");
      } else {
        lcd.clear();
        lcd.print("PIN SALAH!");
        inputPassword = "";
        delay(1000);
        lcd.clear();
        lcd.print("Masukkan PIN:");
      }
    } else if (key == '*') { // hapus PIN
      inputPassword = "";
      lcd.clear();
      lcd.print("Masukkan PIN:");
    } else {
      inputPassword += key;
      lcd.setCursor(0, 1);
      for (int i = 0; i < inputPassword.length(); i++) {
        lcd.print('*');
      }
    }
  }
}

// ================== SETUP ==================
void setup() {
  pinMode(LASER_VCC, OUTPUT);
  pinMode(LDR_DO, INPUT);
  pinMode(BUZZER_VCC, OUTPUT);
  pinMode(BUZZER_GND, OUTPUT);
  pinMode(LED_STATUS, OUTPUT);

  digitalWrite(LASER_VCC, HIGH); // Laser selalu ON
  digitalWrite(BUZZER_GND, LOW);
  digitalWrite(BUZZER_VCC, LOW);
  digitalWrite(LED_STATUS, HIGH);

  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  lcd.print("Sistem Normal");
}

// ================== LOOP ==================
void loop() {
  int ldrValue = digitalRead(LDR_DO);

  switch (currentState) {
    case NORMAL:
      if (ldrValue == HIGH) { // laser terputus
        currentState = ALARM_ACTIVE;
        alarmStartTime = millis();
        lastSirenTime = millis();
        sirenOn = true;
        digitalWrite(BUZZER_VCC, HIGH);
        lcd.clear();
        lcd.print("ALARM AKTIF!!");
        Serial.println("Laser terputus -> Alarm!");
      }
      break;

    case ALARM_ACTIVE:
      updateSirenPattern();
      if (millis() - alarmStartTime >= ALARM_DURATION) {
        currentState = WAIT_PIN;
        lcd.clear();
        lcd.print("Masukkan PIN:");
        digitalWrite(BUZZER_VCC, HIGH);
      }
      break;

    case WAIT_PIN:
      handleKeypadInput();
      if (alarmSilenced) {
        alarmSilenced = false;
      } else {
        digitalWrite(BUZZER_VCC, HIGH);
      }
      break;

    default:
      break;
  }

  delay(10);
}
